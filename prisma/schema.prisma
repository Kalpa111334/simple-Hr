//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id               String            @id() @default(uuid())
  name             String?
  email            String?           @unique()
  pictureUrl       String?           @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation  String?
  status           UserStatus        @default(VERIFIED)
  globalRole       String            @default("USER")
  /// @password
  /// @omit
  password         String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt()
  pwaSubscriptions PwaSubscription[] @relation("user")
  attendances      Attendance[]      @relation("user")
  leaves           Leave[]           @relation("user")
  leaveQuotas      LeaveQuota[]      @relation("user")
  notifications    Notification[]    @relation("user")
}

/// @@allow('all', true)
model Attendance {
  id           String   @id() @default(uuid())
  checkInTime  String?
  checkOutTime String?
  status       String?
  method       String?
  userId       String
  user         User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Leave {
  id          String   @id() @default(uuid())
  startDate   String
  endDate     String
  type        String
  status      String
  documentUrl String?
  reason      String?
  userId      String
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model LeaveQuota {
  id        String   @id() @default(uuid())
  type      String
  totalDays Float
  usedDays  Float
  year      Float
  userId    String
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Notification {
  id        String   @id() @default(uuid())
  title     String
  message   String?
  type      String
  isRead    Boolean
  userId    String
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model PwaSubscription {
  id        String   @id() @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
  userId    String
  user      User     @relation(fields: [userId], references: [id], name: "user")
}
